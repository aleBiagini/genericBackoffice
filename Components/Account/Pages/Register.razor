@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GenericBackoffice.Data
@using GenericBackoffice.Services;

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject TranslationService translationService

<PageTitle>Registrati</PageTitle>

<h1>Registrati</h1>

<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <h2>Crea un nuovo account</h2>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="row">
        <div class="col-md-4">
            <StatusMessage Message="@Message" />
            <DataAnnotationsValidator />
           
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="Nome" />
                <label for="Name">Nome</label>
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Surname" class="form-control" autocomplete="Surname" aria-required="true" placeholder="Cognome" />
                <label for="Surname">Cognome</label>
                <ValidationMessage For="() => Input.Surname" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Address" class="form-control" autocomplete="Address" aria-required="true" placeholder="indirizzo" />
                <label for="Address">Indirizzo</label>
                <ValidationMessage For="() => Input.Address" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FiscalCode" class="form-control" autocomplete="FiscalCode" aria-required="true" placeholder="codice fiscale" />
                <label for="FiscalCode">Codice Fiscale</label>
                <ValidationMessage For="() => Input.FiscalCode" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.City" class="form-control" autocomplete="comune" aria-required="true" placeholder="comune" />
                <label for="City">Comune</label>
                <ValidationMessage For="() => Input.City" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Cap" class="form-control" autocomplete="cap" aria-required="true" placeholder="cap" />
                <label for="Cap">Cap</label>
                <ValidationMessage For="() => Input.Cap" class="text-danger" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Conferma Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Registrati</button>
        </div>
    </div>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string Message => identityErrors is null ? null : translationService.GetTranslatedMessageAsync(identityErrors);

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Nome")]
        public string Name { get; set; } = "";

        [Required]
        [Display(Name = "Cognome")]
        public string Surname { get; set; } = "";

        [Required]
        [Display(Name = "Indirizzo")]
        public string Address { get; set; } = "";

        [Required]
        [Display(Name = "Codice Fiscale")]
        public string FiscalCode { get; set; } = "";

        [Required]
        [Display(Name = "Comune")]
        public string City { get; set; } = "";

        [Required]
        [Display(Name = "CAP")]
        public string Cap { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "La {0} deve essere almeno {2} e al massimo lunga {1} caratteri.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Le due password non coincidono.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
